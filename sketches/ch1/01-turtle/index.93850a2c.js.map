{"mappings":"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","sources":["<anon>","src/lib/turtle.ts","src/lib/vec2.ts","src/sketches/ch1/01--turtle/index.ts"],"sourcesContent":["\nfunction $parcel$export(e, n, v, s) {\n  Object.defineProperty(e, n, {get: v, set: s, enumerable: true, configurable: true});\n}\n\n      var $parcel$global = globalThis;\n    \nvar $parcel$modules = {};\nvar $parcel$inits = {};\n\nvar parcelRequire = $parcel$global[\"parcelRequire4f74\"];\n\nif (parcelRequire == null) {\n  parcelRequire = function(id) {\n    if (id in $parcel$modules) {\n      return $parcel$modules[id].exports;\n    }\n    if (id in $parcel$inits) {\n      var init = $parcel$inits[id];\n      delete $parcel$inits[id];\n      var module = {id: id, exports: {}};\n      $parcel$modules[id] = module;\n      init.call(module.exports, module, module.exports);\n      return module.exports;\n    }\n    var err = new Error(\"Cannot find module '\" + id + \"'\");\n    err.code = 'MODULE_NOT_FOUND';\n    throw err;\n  };\n\n  parcelRequire.register = function register(id, init) {\n    $parcel$inits[id] = init;\n  };\n\n  $parcel$global[\"parcelRequire4f74\"] = parcelRequire;\n}\n\nvar parcelRegister = parcelRequire.register;\nparcelRegister(\"hbDK6\", function(module, exports) {\n\n$parcel$export(module.exports, \"Turtle\", () => $4babaeeab72245b0$export$8dd83a8c0a56669d);\n\nvar $hdJsM = parcelRequire(\"hdJsM\");\nclass $4babaeeab72245b0$var$State {\n    constructor(position, heading){\n        this.position = position;\n        this.heading = heading;\n    }\n    copy() {\n        return new $4babaeeab72245b0$var$State(this.position.copy(), this.heading);\n    }\n}\nclass $4babaeeab72245b0$export$8dd83a8c0a56669d {\n    constructor(p5, heading){\n        this.p5 = p5;\n        this.state = new $4babaeeab72245b0$var$State((0, $hdJsM.Vec2).of(0, 0), heading == undefined ? -p5.HALF_PI : heading);\n        this.states = [];\n    }\n    push() {\n        this.states.push(this.state.copy());\n        return this;\n    }\n    pop() {\n        this.state = this.states.pop();\n        return this;\n    }\n    move_to(x, y) {\n        this.state.position.x = x;\n        this.state.position.y = y;\n        return this;\n    }\n    line_to(x, y) {\n        this.p5.line(this.state.position.x, this.state.position.y, x, y);\n        this.move_to(x, y);\n        return this;\n    }\n    line_forward(length) {\n        const dx = this.state.position.x + Math.cos(this.state.heading) * length;\n        const dy = this.state.position.y + Math.sin(this.state.heading) * length;\n        this.line_to(dx, dy);\n        return this;\n    }\n    move_forward(length) {\n        const dx = this.state.position.x + Math.cos(this.state.heading) * length;\n        const dy = this.state.position.y + Math.sin(this.state.heading) * length;\n        this.move_to(dx, dy);\n        return this;\n    }\n    turn(angle_in_radians) {\n        this.state.heading += angle_in_radians;\n        return this;\n    }\n    set_heading(angle_in_radians) {\n        this.state.heading = angle_in_radians;\n        return this;\n    }\n}\n\n});\nparcelRegister(\"hdJsM\", function(module, exports) {\n\n$parcel$export(module.exports, \"Vec2\", () => $930c69342eb1435a$export$ac4bca90992eed1);\nclass $930c69342eb1435a$export$ac4bca90992eed1 {\n    constructor(x, y){\n        this.x = x;\n        this.y = y;\n    }\n    /**\n   * Get a copy of this vector.\n   * @param dest if specified, the values will be saved in dest.\n   * @returns either dest or a new vector\n   */ copy(dest) {\n        if (!dest) return $930c69342eb1435a$export$ac4bca90992eed1.of(this.x, this.y);\n        dest.x = this.x;\n        dest.y = this.y;\n        return dest;\n    }\n    /**\n   * Computes the sum of this vector and the given vector.\n   *\n   * Results are saved inline.\n   *\n   * @param a the vector to sum\n   * @returns this\n   */ sum(a) {\n        this.x += a.x;\n        this.y += a.y;\n        return this;\n    }\n    /**\n   * Multiply this vector by a scalar.\n   *\n   * Results are saved inline.\n   *\n   * @param a the scalar\n   * @returns this\n   */ mult(a) {\n        this.x *= a;\n        this.y *= a;\n        return this;\n    }\n    /**\n   * Normalizes the vector.\n   *\n   * Results are saved inline.\n   *\n   * @returns this\n   */ normalize() {\n        return this.mult(1.0 / this.length());\n    }\n    /**\n   * Computes the squared length of the vector.\n   */ length_squared() {\n        return this.x * this.x + this.y * this.y;\n    }\n    /**\n   * Computes the length of the vector.\n   */ length() {\n        return Math.sqrt(this.length_squared());\n    }\n    /**\n   * Computes the dot product between two vectors.\n   *\n   * This vector is not modified.\n   *\n   * @param a\n   * @returns the value of the dot product.\n   */ dot(a) {\n        return this.x * a.x + this.y * a.y;\n    }\n    // STATIC METHODS ----------------------------------------------\n    /**\n   * Allocates a new vector.\n   * @param x the x coordinate\n   * @param y the y coordinate\n   * @returns the vector\n   */ static of(x, y) {\n        return new $930c69342eb1435a$export$ac4bca90992eed1(x, y);\n    }\n}\n\n});\n\n\n\nvar $7vzAp = parcelRequire(\"7vzAp\");\n\nvar $hbDK6 = parcelRequire(\"hbDK6\");\n\nvar $9DS0H = parcelRequire(\"9DS0H\");\nfunction $aae36d2c4983b2c6$var$sketch(p5) {\n    const w = window.innerWidth * 0.75;\n    const h = window.innerHeight * 0.75;\n    const bg_color = $9DS0H.antique_white(p5);\n    const stroke_color = $9DS0H.gunmetal(p5);\n    let turtle = new (0, $hbDK6.Turtle)(p5);\n    let t = 0;\n    p5.setup = ()=>{\n        p5.createCanvas(w, h);\n        p5.background(bg_color);\n    };\n    p5.draw = ()=>{\n        if (p5.millis() > t) {\n            t = p5.millis() + 30000;\n            turtle = new (0, $hbDK6.Turtle)(p5).move_to(w / 2, 3 * h / 4);\n            p5.background(bg_color);\n        }\n        p5.stroke(stroke_color);\n        p5.strokeWeight(5);\n        const a = p5.random(p5.HALF_PI * 0.25);\n        const d = p5.random(20);\n        turtle.turn(a).line_forward(d);\n    };\n}\nnew (0, $7vzAp.Page)(\"Turtle\", $aae36d2c4983b2c6$var$sketch);\n\n\n//# sourceMappingURL=index.93850a2c.js.map\n","import P5 from \"p5\";\nimport { Vec2 } from \"~/src/lib/vec2\";\n\nclass State {\n  public position: Vec2;\n  public heading: number;\n\n  constructor(position: Vec2, heading: number) {\n    this.position = position;\n    this.heading = heading;\n  }\n\n  public copy(): State {\n    return new State(this.position.copy(), this.heading);\n  }\n}\n\nexport class Turtle {\n  private p5: P5;\n  private state: State;\n  private states: State[];\n\n  constructor(p5: P5, heading?: number) {\n    this.p5 = p5;\n    this.state = new State(\n      Vec2.of(0, 0),\n      heading == undefined ? -p5.HALF_PI : heading\n    );\n    this.states = [];\n  }\n\n  push(): Turtle {\n    this.states.push(this.state.copy());\n    return this;\n  }\n\n  pop(): Turtle {\n    this.state = this.states.pop();\n    return this;\n  }\n\n  move_to(x: number, y: number): Turtle {\n    this.state.position.x = x;\n    this.state.position.y = y;\n    return this;\n  }\n\n  line_to(x: number, y: number): Turtle {\n    this.p5.line(this.state.position.x, this.state.position.y, x, y);\n    this.move_to(x, y);\n    return this;\n  }\n\n  line_forward(length: number): Turtle {\n    const dx = this.state.position.x + Math.cos(this.state.heading) * length;\n    const dy = this.state.position.y + Math.sin(this.state.heading) * length;\n    this.line_to(dx, dy);\n    return this;\n  }\n\n  move_forward(length: number): Turtle {\n    const dx = this.state.position.x + Math.cos(this.state.heading) * length;\n    const dy = this.state.position.y + Math.sin(this.state.heading) * length;\n    this.move_to(dx, dy);\n    return this;\n  }\n\n  turn(angle_in_radians: number): Turtle {\n    this.state.heading += angle_in_radians;\n    return this;\n  }\n\n  set_heading(angle_in_radians: number): Turtle {\n    this.state.heading = angle_in_radians;\n    return this;\n  }\n}\n","export class Vec2 {\n  public x: number;\n  public y: number;\n\n  constructor(x: number, y: number) {\n    this.x = x;\n    this.y = y;\n  }\n\n  /**\n   * Get a copy of this vector.\n   * @param dest if specified, the values will be saved in dest.\n   * @returns either dest or a new vector\n   */\n  copy(dest?: Vec2): Vec2 {\n    if (!dest) {\n      return Vec2.of(this.x, this.y);\n    }\n    dest.x = this.x;\n    dest.y = this.y;\n    return dest;\n  }\n\n  /**\n   * Computes the sum of this vector and the given vector.\n   *\n   * Results are saved inline.\n   *\n   * @param a the vector to sum\n   * @returns this\n   */\n  public sum(a: Vec2): Vec2 {\n    this.x += a.x;\n    this.y += a.y;\n    return this;\n  }\n\n  /**\n   * Multiply this vector by a scalar.\n   *\n   * Results are saved inline.\n   *\n   * @param a the scalar\n   * @returns this\n   */\n  public mult(a: number): Vec2 {\n    this.x *= a;\n    this.y *= a;\n    return this;\n  }\n\n  /**\n   * Normalizes the vector.\n   *\n   * Results are saved inline.\n   *\n   * @returns this\n   */\n  public normalize(): Vec2 {\n    return this.mult(1.0 / this.length());\n  }\n\n  /**\n   * Computes the squared length of the vector.\n   */\n  public length_squared(): number {\n    return this.x * this.x + this.y * this.y;\n  }\n\n  /**\n   * Computes the length of the vector.\n   */\n  public length(): number {\n    return Math.sqrt(this.length_squared());\n  }\n\n  /**\n   * Computes the dot product between two vectors.\n   *\n   * This vector is not modified.\n   *\n   * @param a\n   * @returns the value of the dot product.\n   */\n  public dot(a: Vec2): number {\n    return this.x * a.x + this.y * a.y;\n  }\n\n  // STATIC METHODS ----------------------------------------------\n\n  /**\n   * Allocates a new vector.\n   * @param x the x coordinate\n   * @param y the y coordinate\n   * @returns the vector\n   */\n  public static of(x: number, y: number): Vec2 {\n    return new Vec2(x, y);\n  }\n}\n","import { Page } from \"~/src/lib/page\";\nimport { Turtle } from \"~/src/lib/turtle\";\nimport * as palette from \"~/src/lib/palette\";\nimport P5 from \"p5\";\n\nfunction sketch(p5: P5) {\n  const w = window.innerWidth * 0.75;\n  const h = window.innerHeight * 0.75;\n  const bg_color = palette.antique_white(p5);\n  const stroke_color = palette.gunmetal(p5);\n\n  let turtle = new Turtle(p5);\n  let t = 0;\n\n  p5.setup = () => {\n    p5.createCanvas(w, h);\n    p5.background(bg_color);\n  };\n\n  p5.draw = () => {\n    if (p5.millis() > t) {\n      t = p5.millis() + 30 * 1000;\n      turtle = new Turtle(p5).move_to(w / 2, (3 * h) / 4);\n      p5.background(bg_color);\n    }\n\n    p5.stroke(stroke_color);\n    p5.strokeWeight(5);\n\n    const a = p5.random(p5.HALF_PI * 0.25);\n    const d = p5.random(20);\n    turtle.turn(a).line_forward(d);\n  };\n}\n\nnew Page(\"Turtle\", sketch);\n"],"names":["$parcel$export","e","n","v","s","Object","defineProperty","get","set","enumerable","configurable","$parcel$global","globalThis","$parcel$modules","$parcel$inits","parcelRequire","id","exports","init","module","call","err","Error","code","register","parcelRegister","$4babaeeab72245b0$export$8dd83a8c0a56669d","$hdJsM","$4babaeeab72245b0$var$State","constructor","position","heading","copy","p5","state","Vec2","of","undefined","HALF_PI","states","push","pop","move_to","x","y","line_to","line","line_forward","length","dx","Math","cos","dy","sin","move_forward","turn","angle_in_radians","set_heading","$930c69342eb1435a$export$ac4bca90992eed1","dest","sum","a","mult","normalize","length_squared","sqrt","dot","$7vzAp","$hbDK6","$9DS0H","Page","w","window","innerWidth","h","innerHeight","bg_color","antique_white","stroke_color","gunmetal","turtle","Turtle","t","setup","createCanvas","background","draw","millis","stroke","strokeWeight","random","d"],"version":3,"file":"index.93850a2c.js.map"}