{"mappings":"A,I,E,W,E,C,E,E,C,E,E,E,iB,A,O,I,A,C,E,S,C,E,G,K,E,O,C,C,E,C,O,C,G,K,E,C,I,E,C,C,E,A,Q,C,C,E,C,I,E,C,G,E,Q,C,C,E,O,C,C,E,C,E,E,I,C,E,O,C,E,E,O,E,E,O,A,C,I,E,A,M,uB,E,I,O,E,I,C,mB,C,C,E,Q,C,S,C,C,C,E,C,C,E,C,C,E,E,iB,C,G,E,Q,C,I,E,E,S,E,E,QCQA,OAAM,EAGJ,YAAY,CAAY,CAAE,CACxB,IAAI,CAAC,KAAK,CAAG,CACf,CAEO,QAAQ,CAAa,CAAE,CAAa,CAAU,CACnD,IAAI,EAAS,EACb,IAAK,IAAI,EAAI,EAAG,EAAI,EAAO,IACzB,EAAS,IAAI,CAAC,YAAY,CAAC,GAE7B,OAAO,CACT,CAEQ,aAAa,CAAa,CAAU,CAC1C,IAAI,EAAS,GACb,IAAK,IAAI,EAAI,EAAG,EAAI,EAAM,MAAM,CAAE,IAAK,CACrC,IAAM,EAAI,CAAK,CAAC,EAAE,CAClB,GAAU,IAAI,CAAC,KAAK,CAAC,EAAE,AACzB,CACA,OAAO,CACT,CACF,CA6FA,IAAI,EAAA,IAAG,CAAE,cA3FT,SAAgB,CAAM,MAChB,EAAW,EAAW,EAAY,CACtC,CAAA,EAAG,aAAa,CAAG,KACjB,EAAI,AAAoB,IAApB,OAAO,UAAU,CACrB,EAAI,AAAqB,IAArB,OAAO,WAAW,CAEtB,EAAK,EAAI,GACT,EAAK,EAAI,GACT,EAAG,YAAY,CAAC,EAAG,EAAG,CAAA,GACtB,EAAG,UAAU,CAAC,EAAA,aAAA,CAAsB,GACtC,EAGA,IAAM,EAAM,IAAI,EAAI,CAClB,EAAG,KACH,EAAG,KACH,EAAG,IACH,EAAG,GACL,EAoDA,CAAA,EAAG,KAAK,CAAG,KACT,EAAG,YAAY,CAAC,EAAG,GACnB,EAAG,SAAS,CAAC,EAAG,GAAG,EACnB,EAAG,UAAU,CAAC,KACd,EAAG,aAAa,EAClB,EAEA,IAAI,EAAI,EACJ,EAAI,GACR,CAAA,EAAG,IAAI,CAAG,KACJ,EAAG,MAAM,GAAK,IAChB,EAAI,EAAG,MAAM,GAAK,IAClB,CAAA,GAAK,CAAA,EACG,KACN,EAAG,UAAU,CAAC,KACd,EAAI,IAGR,AA5CF,SAAoB,CAAa,CAAE,CAAS,CAAE,CAAS,EACrD,IAAK,IAAM,KAAK,EAAO,KAzBd,EAMA,EAMA,EAMA,EAQP,GAAI,GAAK,GAAK,GAAK,EACjB,OAEF,OAAQ,GACN,IAAK,IACH,IA/BG,EA+BI,EA9Bb,EAAG,IAAI,CAAC,QACR,EAAG,IAAI,CAAC,EA6BQ,EA7BF,AAAK,EAAL,EAAQ,GACf,AAAK,EAAL,GA6BD,KAEF,KAAK,IACH,IA7BG,EA6BI,EA5Bb,EAAG,IAAI,CAAC,QACR,EAAG,IAAI,CAAC,EA2BQ,EA3BF,EAAI,GACX,GA2BD,KAEF,KAAK,IACH,IA3BG,EA2BI,EA1Bb,EAAG,IAAI,CAAC,SACR,EAAG,IAAI,CAAC,EAyBQ,EAzBF,AAAK,EAAL,EAAQ,GACf,AAAK,EAAL,GAyBD,KAEF,KAAK,IACH,IAzBG,EAyBI,EAxBb,EAAG,IAAI,CAAC,SACR,EAAG,IAAI,CAAC,EAuBQ,EAvBF,EAAI,GACX,EAyBL,CACF,CACF,EAoBa,EAAI,OAAO,CA5EV,IA4EkB,GAAI,EAAG,EAAI,EAC3C,CACF","sources":["<anon>","src/sketches/ch1/00)--dol-system/index.ts"],"sourcesContent":["\n      var $parcel$global = globalThis;\n    \nvar $parcel$modules = {};\nvar $parcel$inits = {};\n\nvar parcelRequire = $parcel$global[\"parcelRequire4f74\"];\n\nif (parcelRequire == null) {\n  parcelRequire = function(id) {\n    if (id in $parcel$modules) {\n      return $parcel$modules[id].exports;\n    }\n    if (id in $parcel$inits) {\n      var init = $parcel$inits[id];\n      delete $parcel$inits[id];\n      var module = {id: id, exports: {}};\n      $parcel$modules[id] = module;\n      init.call(module.exports, module, module.exports);\n      return module.exports;\n    }\n    var err = new Error(\"Cannot find module '\" + id + \"'\");\n    err.code = 'MODULE_NOT_FOUND';\n    throw err;\n  };\n\n  parcelRequire.register = function register(id, init) {\n    $parcel$inits[id] = init;\n  };\n\n  $parcel$global[\"parcelRequire4f74\"] = parcelRequire;\n}\n\nvar parcelRegister = parcelRequire.register;\n\nvar $7vzAp = parcelRequire(\"7vzAp\");\n\nvar $9DS0H = parcelRequire(\"9DS0H\");\nclass $7217a6f7cc262fa4$var$DOL {\n    constructor(rules){\n        this.rules = rules;\n    }\n    produce(axiom, steps) {\n        let result = axiom;\n        for(let i = 0; i < steps; i++)result = this.produce_step(result);\n        return result;\n    }\n    produce_step(axiom) {\n        let result = \"\";\n        for(let i = 0; i < axiom.length; i++){\n            const c = axiom[i];\n            result += this.rules[c];\n        }\n        return result;\n    }\n}\nfunction $7217a6f7cc262fa4$var$sketch(p5) {\n    let w, h, bw, bh;\n    p5.windowResized = ()=>{\n        w = window.innerWidth * 0.75;\n        h = window.innerHeight * 0.75;\n        bw = w / 25;\n        bh = h / 10;\n        p5.resizeCanvas(w, h, false);\n        p5.background($9DS0H.antique_white(p5));\n    };\n    const axiom = \"R\";\n    const dol = new $7217a6f7cc262fa4$var$DOL({\n        R: \"LS\",\n        L: \"MR\",\n        S: \"R\",\n        M: \"L\"\n    });\n    function R(x, y) {\n        p5.fill(\"grey\");\n        p5.rect(x, y, bw * 2, bh);\n        return bw * 2;\n    }\n    function S(x, y) {\n        p5.fill(\"grey\");\n        p5.rect(x, y, bw, bh);\n        return bw;\n    }\n    function L(x, y) {\n        p5.fill(\"white\");\n        p5.rect(x, y, bw * 2, bh);\n        return bw * 2;\n    }\n    function M(x, y) {\n        p5.fill(\"white\");\n        p5.rect(x, y, bw, bh);\n        return bw;\n    }\n    function draw_axiom(axiom, x, y) {\n        for (const c of axiom){\n            if (x >= w || y >= h) return;\n            switch(c){\n                case \"R\":\n                    x += R(x, y);\n                    break;\n                case \"S\":\n                    x += S(x, y);\n                    break;\n                case \"L\":\n                    x += L(x, y);\n                    break;\n                case \"M\":\n                    x += M(x, y);\n                    break;\n            }\n        }\n    }\n    p5.setup = ()=>{\n        p5.createCanvas(w, h);\n        p5.colorMode(p5.HSL);\n        p5.background(128);\n        p5.windowResized();\n    };\n    let c = 0;\n    let t = 1000;\n    p5.draw = ()=>{\n        if (p5.millis() > t) {\n            t = p5.millis() + 1000;\n            c += 1;\n            if (c > 10) {\n                p5.background(128);\n                c = 0;\n            }\n        }\n        draw_axiom(dol.produce(axiom, c), 0, c * bh);\n    };\n}\nnew (0, $7vzAp.Page)(\"DOL-Systems\", $7217a6f7cc262fa4$var$sketch);\n\n\n//# sourceMappingURL=index.21af10f0.js.map\n","import { Page } from \"~/src/lib/page\";\nimport P5 from \"p5\";\nimport * as palette from \"~/src/lib/palette\";\n\ninterface Rules {\n  readonly [predecessor: string]: string;\n}\n\nclass DOL {\n  private rules: Rules;\n\n  constructor(rules: Rules) {\n    this.rules = rules;\n  }\n\n  public produce(axiom: string, steps: number): string {\n    let result = axiom;\n    for (let i = 0; i < steps; i++) {\n      result = this.produce_step(result);\n    }\n    return result;\n  }\n\n  private produce_step(axiom: string): string {\n    let result = \"\";\n    for (let i = 0; i < axiom.length; i++) {\n      const c = axiom[i];\n      result += this.rules[c];\n    }\n    return result;\n  }\n}\n\nfunction sketch(p5: P5) {\n  let w: number, h: number, bw: number, bh: number;\n  p5.windowResized = () => {\n    w = window.innerWidth * 0.75;\n    h = window.innerHeight * 0.75;\n\n    bw = w / 25;\n    bh = h / 10;\n    p5.resizeCanvas(w, h, false);\n    p5.background(palette.antique_white(p5));\n  };\n\n  const axiom = \"R\";\n  const dol = new DOL({\n    R: \"LS\",\n    L: \"MR\",\n    S: \"R\",\n    M: \"L\",\n  });\n\n  function R(x: number, y: number): number {\n    p5.fill(\"grey\");\n    p5.rect(x, y, bw * 2, bh);\n    return bw * 2;\n  }\n\n  function S(x: number, y: number): number {\n    p5.fill(\"grey\");\n    p5.rect(x, y, bw, bh);\n    return bw;\n  }\n\n  function L(x: number, y: number): number {\n    p5.fill(\"white\");\n    p5.rect(x, y, bw * 2, bh);\n    return bw * 2;\n  }\n\n  function M(x: number, y: number): number {\n    p5.fill(\"white\");\n    p5.rect(x, y, bw, bh);\n    return bw;\n  }\n\n  function draw_axiom(axiom: string, x: number, y: number) {\n    for (const c of axiom) {\n      if (x >= w || y >= h) {\n        return;\n      }\n      switch (c) {\n        case \"R\": {\n          x += R(x, y);\n          break;\n        }\n        case \"S\": {\n          x += S(x, y);\n          break;\n        }\n        case \"L\": {\n          x += L(x, y);\n          break;\n        }\n        case \"M\": {\n          x += M(x, y);\n          break;\n        }\n      }\n    }\n  }\n\n  p5.setup = () => {\n    p5.createCanvas(w, h);\n    p5.colorMode(p5.HSL);\n    p5.background(128);\n    p5.windowResized();\n  };\n\n  let c = 0;\n  let t = 1000;\n  p5.draw = () => {\n    if (p5.millis() > t) {\n      t = p5.millis() + 1000;\n      c += 1;\n      if (c > 10) {\n        p5.background(128);\n        c = 0;\n      }\n    }\n    draw_axiom(dol.produce(axiom, c), 0, c * bh);\n  };\n}\nnew Page(\"DOL-Systems\", sketch);\n"],"names":["$parcel$global","globalThis","$parcel$modules","$parcel$inits","parcelRequire","id","exports","init","module","call","err","Error","code","register","$7vzAp","$9DS0H","$7217a6f7cc262fa4$var$DOL","constructor","rules","produce","axiom","steps","result","i","produce_step","length","c","Page","p5","w","h","bw","bh","windowResized","window","innerWidth","innerHeight","resizeCanvas","background","antique_white","dol","R","L","S","M","setup","createCanvas","colorMode","HSL","t","draw","millis","draw_axiom","x","y","fill","rect"],"version":3,"file":"index.21af10f0.js.map"}