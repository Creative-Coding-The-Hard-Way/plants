{"mappings":"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","sources":["<anon>","src/lib/turtle.ts","src/lib/vec2.ts","src/sketches/ch1/02--dol-system-2/index.ts","src/sketches/ch1/02--dol-system-2/lsystem.ts"],"sourcesContent":["\nfunction $parcel$export(e, n, v, s) {\n  Object.defineProperty(e, n, {get: v, set: s, enumerable: true, configurable: true});\n}\n\n      var $parcel$global = globalThis;\n    \nvar $parcel$modules = {};\nvar $parcel$inits = {};\n\nvar parcelRequire = $parcel$global[\"parcelRequire4f74\"];\n\nif (parcelRequire == null) {\n  parcelRequire = function(id) {\n    if (id in $parcel$modules) {\n      return $parcel$modules[id].exports;\n    }\n    if (id in $parcel$inits) {\n      var init = $parcel$inits[id];\n      delete $parcel$inits[id];\n      var module = {id: id, exports: {}};\n      $parcel$modules[id] = module;\n      init.call(module.exports, module, module.exports);\n      return module.exports;\n    }\n    var err = new Error(\"Cannot find module '\" + id + \"'\");\n    err.code = 'MODULE_NOT_FOUND';\n    throw err;\n  };\n\n  parcelRequire.register = function register(id, init) {\n    $parcel$inits[id] = init;\n  };\n\n  $parcel$global[\"parcelRequire4f74\"] = parcelRequire;\n}\n\nvar parcelRegister = parcelRequire.register;\nparcelRegister(\"hbDK6\", function(module, exports) {\n\n$parcel$export(module.exports, \"Turtle\", () => $4babaeeab72245b0$export$8dd83a8c0a56669d);\n\nvar $hdJsM = parcelRequire(\"hdJsM\");\nclass $4babaeeab72245b0$var$State {\n    constructor(position, heading){\n        this.position = position;\n        this.heading = heading;\n    }\n    copy() {\n        return new $4babaeeab72245b0$var$State(this.position.copy(), this.heading);\n    }\n}\nclass $4babaeeab72245b0$export$8dd83a8c0a56669d {\n    constructor(p5, heading){\n        this.p5 = p5;\n        this.state = new $4babaeeab72245b0$var$State((0, $hdJsM.Vec2).of(0, 0), heading == undefined ? -p5.HALF_PI : heading);\n        this.states = [];\n    }\n    push() {\n        this.states.push(this.state.copy());\n        return this;\n    }\n    pop() {\n        this.state = this.states.pop();\n        return this;\n    }\n    move_to(x, y) {\n        this.state.position.x = x;\n        this.state.position.y = y;\n        return this;\n    }\n    line_to(x, y) {\n        this.p5.line(this.state.position.x, this.state.position.y, x, y);\n        this.move_to(x, y);\n        return this;\n    }\n    line_forward(length) {\n        const dx = this.state.position.x + Math.cos(this.state.heading) * length;\n        const dy = this.state.position.y + Math.sin(this.state.heading) * length;\n        this.line_to(dx, dy);\n        return this;\n    }\n    move_forward(length) {\n        const dx = this.state.position.x + Math.cos(this.state.heading) * length;\n        const dy = this.state.position.y + Math.sin(this.state.heading) * length;\n        this.move_to(dx, dy);\n        return this;\n    }\n    turn(angle_in_radians) {\n        this.state.heading += angle_in_radians;\n        return this;\n    }\n    set_heading(angle_in_radians) {\n        this.state.heading = angle_in_radians;\n        return this;\n    }\n}\n\n});\nparcelRegister(\"hdJsM\", function(module, exports) {\n\n$parcel$export(module.exports, \"Vec2\", () => $930c69342eb1435a$export$ac4bca90992eed1);\nclass $930c69342eb1435a$export$ac4bca90992eed1 {\n    constructor(x, y){\n        this.x = x;\n        this.y = y;\n    }\n    /**\n   * Get a copy of this vector.\n   * @param dest if specified, the values will be saved in dest.\n   * @returns either dest or a new vector\n   */ copy(dest) {\n        if (!dest) return $930c69342eb1435a$export$ac4bca90992eed1.of(this.x, this.y);\n        dest.x = this.x;\n        dest.y = this.y;\n        return dest;\n    }\n    /**\n   * Computes the sum of this vector and the given vector.\n   *\n   * Results are saved inline.\n   *\n   * @param a the vector to sum\n   * @returns this\n   */ sum(a) {\n        this.x += a.x;\n        this.y += a.y;\n        return this;\n    }\n    /**\n   * Multiply this vector by a scalar.\n   *\n   * Results are saved inline.\n   *\n   * @param a the scalar\n   * @returns this\n   */ mult(a) {\n        this.x *= a;\n        this.y *= a;\n        return this;\n    }\n    /**\n   * Normalizes the vector.\n   *\n   * Results are saved inline.\n   *\n   * @returns this\n   */ normalize() {\n        return this.mult(1.0 / this.length());\n    }\n    /**\n   * Computes the squared length of the vector.\n   */ length_squared() {\n        return this.x * this.x + this.y * this.y;\n    }\n    /**\n   * Computes the length of the vector.\n   */ length() {\n        return Math.sqrt(this.length_squared());\n    }\n    /**\n   * Computes the dot product between two vectors.\n   *\n   * This vector is not modified.\n   *\n   * @param a\n   * @returns the value of the dot product.\n   */ dot(a) {\n        return this.x * a.x + this.y * a.y;\n    }\n    // STATIC METHODS ----------------------------------------------\n    /**\n   * Allocates a new vector.\n   * @param x the x coordinate\n   * @param y the y coordinate\n   * @returns the vector\n   */ static of(x, y) {\n        return new $930c69342eb1435a$export$ac4bca90992eed1(x, y);\n    }\n}\n\n});\n\n\n\nvar $7vzAp = parcelRequire(\"7vzAp\");\n\nvar $9DS0H = parcelRequire(\"9DS0H\");\n\nvar $hbDK6 = parcelRequire(\"hbDK6\");\nfunction $2f9a788174f5ee2b$export$1c9f709888824e05(axiom) {\n    let result = \"\";\n    for (const g of axiom)result += `|${g.id.description}|`;\n    return result;\n}\nfunction $2f9a788174f5ee2b$export$67beed298888a38b(axiom, actions) {\n    for (const g of axiom){\n        const action = actions.get(g.id);\n        if (action != undefined) action(g);\n    }\n}\nclass $2f9a788174f5ee2b$export$2bf3081bedff6dc4 {\n    constructor(){\n        this.axiom = [];\n        this.scratch = [];\n        this.rules = [];\n    }\n    // Public API ---------------------------------------------------------------\n    set_axiom(axiom) {\n        this.axiom.length = 0;\n        this.axiom.push(...axiom);\n    }\n    get_axiom() {\n        return [\n            ...this.axiom\n        ];\n    }\n    add_rule(predecessor, successor) {\n        this.rules.push({\n            predecessor: predecessor,\n            successor: successor\n        });\n    }\n    produce() {\n        this.scratch.length = 0;\n        for (const sym of this.axiom)this.append_successor(sym);\n        [this.scratch, this.axiom] = [\n            this.axiom,\n            this.scratch\n        ];\n    }\n    // Private API --------------------------------------------------------------\n    append_successor(sym) {\n        for (const rule of this.rules)if (rule.predecessor == sym) {\n            this.scratch.push(...rule.successor);\n            return;\n        }\n        this.scratch.push(sym);\n    }\n}\n\n\nfunction $bbccbf91493953aa$var$sketch(p5) {\n    const w = window.innerWidth * 0.75;\n    const h = window.innerHeight * 0.75;\n    const bg_color = $9DS0H.antique_white(p5);\n    const F = {\n        id: Symbol(\"F\")\n    };\n    const m = {\n        id: Symbol(\"-\")\n    };\n    const a = {\n        id: Symbol(\"+\")\n    };\n    const system = new (0, $2f9a788174f5ee2b$export$2bf3081bedff6dc4)();\n    system.add_rule(F, [\n        F,\n        m,\n        F,\n        a,\n        F,\n        a,\n        F,\n        F,\n        m,\n        F,\n        m,\n        F,\n        a,\n        F\n    ]);\n    p5.setup = ()=>{\n        p5.createCanvas(w, h);\n        p5.frameRate(2);\n    };\n    let count = 10;\n    p5.draw = ()=>{\n        count++;\n        if (count > 5) {\n            count = 0;\n            system.set_axiom([\n                F,\n                m,\n                F,\n                m,\n                F,\n                m,\n                F\n            ]);\n        } else system.produce();\n        p5.background(bg_color);\n        let turtle = new (0, $hbDK6.Turtle)(p5);\n        turtle.move_to(w / 3, 3 * h / 4);\n        const d = w / 3 * Math.pow(1 / 4, count);\n        const theta = p5.HALF_PI;\n        const axiom = system.get_axiom();\n        (0, $2f9a788174f5ee2b$export$67beed298888a38b)(axiom, new Map([\n            [\n                F.id,\n                ()=>{\n                    turtle.line_forward(d);\n                }\n            ],\n            [\n                m.id,\n                ()=>{\n                    turtle.turn(theta);\n                }\n            ],\n            [\n                a.id,\n                ()=>{\n                    turtle.turn(-theta);\n                }\n            ]\n        ]));\n    };\n}\nnew (0, $7vzAp.Page)(\"Turtle\", $bbccbf91493953aa$var$sketch);\n\n\n//# sourceMappingURL=index.aeb36300.js.map\n","import P5 from \"p5\";\nimport { Vec2 } from \"~/src/lib/vec2\";\n\nclass State {\n  public position: Vec2;\n  public heading: number;\n\n  constructor(position: Vec2, heading: number) {\n    this.position = position;\n    this.heading = heading;\n  }\n\n  public copy(): State {\n    return new State(this.position.copy(), this.heading);\n  }\n}\n\nexport class Turtle {\n  private p5: P5;\n  private state: State;\n  private states: State[];\n\n  constructor(p5: P5, heading?: number) {\n    this.p5 = p5;\n    this.state = new State(\n      Vec2.of(0, 0),\n      heading == undefined ? -p5.HALF_PI : heading\n    );\n    this.states = [];\n  }\n\n  push(): Turtle {\n    this.states.push(this.state.copy());\n    return this;\n  }\n\n  pop(): Turtle {\n    this.state = this.states.pop();\n    return this;\n  }\n\n  move_to(x: number, y: number): Turtle {\n    this.state.position.x = x;\n    this.state.position.y = y;\n    return this;\n  }\n\n  line_to(x: number, y: number): Turtle {\n    this.p5.line(this.state.position.x, this.state.position.y, x, y);\n    this.move_to(x, y);\n    return this;\n  }\n\n  line_forward(length: number): Turtle {\n    const dx = this.state.position.x + Math.cos(this.state.heading) * length;\n    const dy = this.state.position.y + Math.sin(this.state.heading) * length;\n    this.line_to(dx, dy);\n    return this;\n  }\n\n  move_forward(length: number): Turtle {\n    const dx = this.state.position.x + Math.cos(this.state.heading) * length;\n    const dy = this.state.position.y + Math.sin(this.state.heading) * length;\n    this.move_to(dx, dy);\n    return this;\n  }\n\n  turn(angle_in_radians: number): Turtle {\n    this.state.heading += angle_in_radians;\n    return this;\n  }\n\n  set_heading(angle_in_radians: number): Turtle {\n    this.state.heading = angle_in_radians;\n    return this;\n  }\n}\n","export class Vec2 {\n  public x: number;\n  public y: number;\n\n  constructor(x: number, y: number) {\n    this.x = x;\n    this.y = y;\n  }\n\n  /**\n   * Get a copy of this vector.\n   * @param dest if specified, the values will be saved in dest.\n   * @returns either dest or a new vector\n   */\n  copy(dest?: Vec2): Vec2 {\n    if (!dest) {\n      return Vec2.of(this.x, this.y);\n    }\n    dest.x = this.x;\n    dest.y = this.y;\n    return dest;\n  }\n\n  /**\n   * Computes the sum of this vector and the given vector.\n   *\n   * Results are saved inline.\n   *\n   * @param a the vector to sum\n   * @returns this\n   */\n  public sum(a: Vec2): Vec2 {\n    this.x += a.x;\n    this.y += a.y;\n    return this;\n  }\n\n  /**\n   * Multiply this vector by a scalar.\n   *\n   * Results are saved inline.\n   *\n   * @param a the scalar\n   * @returns this\n   */\n  public mult(a: number): Vec2 {\n    this.x *= a;\n    this.y *= a;\n    return this;\n  }\n\n  /**\n   * Normalizes the vector.\n   *\n   * Results are saved inline.\n   *\n   * @returns this\n   */\n  public normalize(): Vec2 {\n    return this.mult(1.0 / this.length());\n  }\n\n  /**\n   * Computes the squared length of the vector.\n   */\n  public length_squared(): number {\n    return this.x * this.x + this.y * this.y;\n  }\n\n  /**\n   * Computes the length of the vector.\n   */\n  public length(): number {\n    return Math.sqrt(this.length_squared());\n  }\n\n  /**\n   * Computes the dot product between two vectors.\n   *\n   * This vector is not modified.\n   *\n   * @param a\n   * @returns the value of the dot product.\n   */\n  public dot(a: Vec2): number {\n    return this.x * a.x + this.y * a.y;\n  }\n\n  // STATIC METHODS ----------------------------------------------\n\n  /**\n   * Allocates a new vector.\n   * @param x the x coordinate\n   * @param y the y coordinate\n   * @returns the vector\n   */\n  public static of(x: number, y: number): Vec2 {\n    return new Vec2(x, y);\n  }\n}\n","import { Page } from \"~/src/lib/page\";\nimport * as palette from \"~/src/lib/palette\";\nimport P5 from \"p5\";\nimport { Turtle } from \"~src/lib/turtle\";\nimport { LSystem, interpret } from \"./lsystem\";\n\nfunction sketch(p5: P5) {\n  const w = window.innerWidth * 0.75;\n  const h = window.innerHeight * 0.75;\n  const bg_color = palette.antique_white(p5);\n\n  const F = { id: Symbol(\"F\") } as const;\n  const m = { id: Symbol(\"-\") } as const;\n  const a = { id: Symbol(\"+\") } as const;\n  const system = new LSystem();\n  system.add_rule(F, [F, m, F, a, F, a, F, F, m, F, m, F, a, F]);\n\n  p5.setup = () => {\n    p5.createCanvas(w, h);\n    p5.frameRate(2);\n  };\n\n  let count = 10;\n  p5.draw = () => {\n    count++;\n    if (count > 5) {\n      count = 0;\n      system.set_axiom([F, m, F, m, F, m, F]);\n    } else {\n      system.produce();\n    }\n\n    p5.background(bg_color);\n\n    let turtle = new Turtle(p5);\n    turtle.move_to(w / 3, (3 * h) / 4);\n\n    const d = (w / 3) * Math.pow(1 / 4, count);\n    const theta = p5.HALF_PI;\n\n    const axiom = system.get_axiom();\n    interpret(\n      axiom,\n      new Map([\n        [\n          F.id,\n          () => {\n            turtle.line_forward(d);\n          },\n        ],\n        [\n          m.id,\n          () => {\n            turtle.turn(theta);\n          },\n        ],\n        [\n          a.id,\n          () => {\n            turtle.turn(-theta);\n          },\n        ],\n      ])\n    );\n  };\n}\n\nnew Page(\"Turtle\", sketch);\n","export interface Grapheme {\n  readonly id: Symbol;\n}\n\nexport interface Rule<G> {\n  predecessor: G;\n  successor: G[];\n}\n\nexport type Action = (g: Grapheme) => void;\nexport type Actions = Map<Symbol, Action>;\n\nexport function debug(axiom: Grapheme[]): string {\n  let result = \"\";\n  for (const g of axiom) {\n    result += `|${g.id.description}|`;\n  }\n  return result;\n}\n\nexport function interpret(axiom: Grapheme[], actions: Actions) {\n  for (const g of axiom) {\n    const action = actions.get(g.id);\n    if (action != undefined) {\n      action(g);\n    }\n  }\n}\n\nexport class LSystem {\n  private axiom: Grapheme[];\n  private scratch: Grapheme[];\n  private rules: Rule<Grapheme>[];\n\n  constructor() {\n    this.axiom = [];\n    this.scratch = [];\n    this.rules = [];\n  }\n\n  // Public API ---------------------------------------------------------------\n\n  public set_axiom(axiom: Grapheme[]) {\n    this.axiom.length = 0;\n    this.axiom.push(...axiom);\n  }\n\n  public get_axiom(): Grapheme[] {\n    return [...this.axiom];\n  }\n\n  public add_rule(predecessor: Grapheme, successor: Grapheme[]) {\n    this.rules.push({ predecessor, successor });\n  }\n\n  public produce() {\n    this.scratch.length = 0;\n    for (const sym of this.axiom) {\n      this.append_successor(sym);\n    }\n    [this.scratch, this.axiom] = [this.axiom, this.scratch];\n  }\n\n  // Private API --------------------------------------------------------------\n\n  private append_successor(sym: Grapheme) {\n    for (const rule of this.rules) {\n      if (rule.predecessor == sym) {\n        this.scratch.push(...rule.successor);\n        return;\n      }\n    }\n    this.scratch.push(sym);\n  }\n}\n"],"names":["$parcel$export","e","n","v","s","Object","defineProperty","get","set","enumerable","configurable","$parcel$global","globalThis","$parcel$modules","$parcel$inits","parcelRequire","id","exports","init","module","call","err","Error","code","register","parcelRegister","$4babaeeab72245b0$export$8dd83a8c0a56669d","$hdJsM","$4babaeeab72245b0$var$State","constructor","position","heading","copy","p5","state","Vec2","of","undefined","HALF_PI","states","push","pop","move_to","x","y","line_to","line","line_forward","length","dx","Math","cos","dy","sin","move_forward","turn","angle_in_radians","set_heading","$930c69342eb1435a$export$ac4bca90992eed1","dest","sum","a","mult","normalize","length_squared","sqrt","dot","$7vzAp","$9DS0H","$hbDK6","$2f9a788174f5ee2b$export$2bf3081bedff6dc4","axiom","scratch","rules","set_axiom","get_axiom","add_rule","predecessor","successor","produce","sym","append_successor","rule","Page","w","window","innerWidth","h","innerHeight","bg_color","antique_white","F","Symbol","m","system","setup","createCanvas","frameRate","count","draw","background","turtle","Turtle","d","pow","theta","actions","g","action","Map"],"version":3,"file":"index.aeb36300.js.map"}